{%- liquid
  if "ar he he-IL hi" contains localization.language.iso_code
    assign rtl = '-rtl'
  endif
-%}
{{ 'component-rte.css' | asset_url | stylesheet_tag }}
<style>
	:root {
		--coming-soon-color: var(--text-color);
		--coming-soon-link-color: var(--body-link-secondary-color);
		--coming-soon-link-hover-color: var(--body-link-secondary-color-hover);
		--coming-soon-title-color: var(--custom-color);
		--coming-soon-bg1: var(--body-bg);
		--coming-soon-bg2: none;
		--coming-social-color: var(--custom-color);
		--coming-social-hover-color: var(--text-color);
		--coming-clock-indicator-color: var(--decor-border-middle-color);
		--coming-clock-indicator-active-color: var(--custom-color);
		--coming-clock-indicator-opacity: 1;
	}
</style>
<style>
  /* {%- if section.settings.style == 'classic' -%}
    :root {
      --coming-soon-color: #414C55;
      --coming-soon-title-color: #0067ff;
      --coming-soon-bg1: #E5E5E5;
      --coming-soon-bg2: none;
      --coming-social-color: #0067ff;
      --coming-social-hover-color: #414C55;
      --coming-button-hover-bg: #0067ff;
      --coming-clock-indicator-color: #ccc;
      --coming-clock-indicator-active-color: #0067ff;
      --coming-clock-indicator-opacity: 1;
    }
  {%- else -%}
    :root {
      --coming-soon-color: #fff;
      --coming-soon-title-color: #fff;
      --coming-soon-bg1: #2364CC;
      --coming-soon-bg2: #B171BF;
      --coming-social-color: #fff;
      --coming-social-hover-color: #EDF1FF;
      --coming-button-hover-bg: #2D8BED;
      --coming-clock-indicator-color: #fff;
      --coming-clock-indicator-active-color: #fff;
      --coming-clock-indicator-opacity: 0.44;
    }
  {%- endif -%} */
</style>
{{ 'coming-soon' | append: rtl | append: '.css' | asset_url | stylesheet_tag }}
<main-password>
  <div class="coming-soon-content coming-soon-content--gradient" role="main" id="MainContent">
    <div class="coming-soon-content-bg">
      <div class="d-flex flex-column align-items-center justify-content-center text-center">
        <div class="coming-soon-content-inside" style="opacity: 0;">
				  <div class="coming-soon-top-text">{{ shop.password_message }}</div>
          <div id="login"  class="coming-soon-tab">
            {%- form 'storefront_password', class: 'password-form' -%}
              <div {% if form.errors %}class="error"{% endif %}>
            <h1 class="coming-soon-title">{{ 'theme.general.i_am_staff' | t }}</h1>
                <div class="coming-soon-text"><p>&nbsp;</p></div>
            <div class="subscribe-input-group">
              <h2>etdfdf</h2>
              <input
                type="password"
                name="password"
                id="Password"
                class="form-control form-control--rounded form-control--bg {% if settings.input_alt_border == "1" %}border-0{% endif %} form-control--shadow"
                autocomplete="current-password"
                {% if form.errors %}
                  aria-invalid="true"
                  aria-describedby="PasswordLoginForm-password-error"
                {%- endif -%}
                placeholder="{{ 'general.password_page.login_form_password_placeholder' | t }}"
                required
              >
              <button class="btn btn--invert">{{ 'theme.general.login' | t }}</button>
            </div>
            {%- if form.errors -%}
              <div role="status">
                <span class="visually-hidden">{{ 'accessibility.error' | t }}</span>
                {%- liquid
                  assign message = 'general.password_page.login_form_error' | t
                  render 'error', message: message, class: 'justify-content-center'
                -%}
              </div>
            {%- endif -%}
              </div>
            {%- endform -%}
          </div>

          <div id="subscribe" class="coming-soon-tab">
            {%- for block in section.blocks -%}
              {%- case block.type -%}
                {%- when 'heading' -%}
                  <h1 class="coming-soon-title" {{ block.shopify_attributes }}>{{ block.settings.heading | escape }}</h1>                  
                {%- when 'paragraph' -%}
                  <div class="coming-soon-text" {{ block.shopify_attributes }}>{{ block.settings.text }}</div>
                {%- when 'email_form' -%}
                  <div class="mt-5"></div>
{% comment %}                   
                  {% form 'customer', class: 'newsletter-form' %}
                    <input type="hidden" name="contact[tags]" value="newsletter">
                    <div class="subscribe-input-group" {{ block.shopify_attributes }}>
                      <input
                        type="email"
                        name="contact[email]"
                        class="form-control form-control--rounded form-control--bg {% if settings.input_alt_border == "1" %}border-0{% endif %} form-control--shadow"
                        value="{{ form.email }}"
                        aria-required="true"
                        autocorrect="off"
                        autocapitalize="off"
                        autocomplete="email"
                        {% if form.errors %}
                          autofocus
                          aria-invalid="true"
                          aria-describedby="Newsletter-error--{{ section.id }}"
                          {% elsif form.posted_successfully? %}
                          aria-describedby="Newsletter-success--{{ section.id }}"
                        {% endif %}
                        placeholder="{{ 'newsletter.label' | t }}"
                        required
                      >
                      <button class="btn btn--invert" type="submit">{{ 'newsletter.button_label' | t }}</button>
                    </div>
                    {%- liquid
                      if form.errors
                        assign message = form.errors.translated_fields['email'] | capitalize | append: ' ' | append: form.errors.messages['email']
                        render 'error', message: message, class: 'justify-content-center'
                      endif
                    -%}
                    {%- if form.posted_successfully? -%}
                      <div tabindex="-1" autofocus>
                        {%- liquid assign message = 'newsletter.success' | t -%}
                        {% render 'success', message: message, class: 'justify-content-center' %}
                      </div>
                    {%- endif -%}
                  {%- endform -%} {% endcomment %}

                  <div id="mc_embed_shell">
      <link href="//cdn-images.mailchimp.com/embedcode/classic-061523.css" rel="stylesheet" type="text/css">
  <style type="text/css">
        #mc_embed_signup{background:#fff; false;clear:left; font:14px Helvetica,Arial,sans-serif; width: 600px;}
        /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block.
           We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
</style>
<div id="mc_embed_signup">
    <form action="https://creedlabel.us15.list-manage.com/subscribe/post?u=7c1b8e51edfd1289516641429&amp;id=cbd768444f&amp;f_id=0088c2e1f0" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank">
        <div id="mc_embed_signup_scroll" class="max-w-[400px] m-auto">
          <h2>Subscribe</h2>
            <div class="indicates-required"><span class="asterisk">*</span> indicates required</div>
            <div class="mc-field-group"><label for="mce-EMAIL">Email Address <span class="asterisk">*</span></label><input type="email" name="EMAIL" class="required email" id="mce-EMAIL" required="" value=""></div>
        <div id="mce-responses" class="clear foot">
            <div class="response" id="mce-error-response" style="display: none;"></div>
            <div class="response" id="mce-success-response" style="display: none;"></div>
        </div>
    <div aria-hidden="true" style="position: absolute; left: -5000px;">
        /* real people should not fill this in and expect good things - do not remove this or risk form bot signups */
        <input type="text" name="b_7c1b8e51edfd1289516641429_cbd768444f" tabindex="-1" value="">
    </div>
        <div class="optionalParent">
            <div class="clear foot">
                <input type="submit" name="subscribe" id="mc-embedded-subscribe" class="button" value="Subscribe">
                <p style="margin: 0px auto;"><a href="http://eepurl.com/jpIJ0A" title="Mailchimp - email marketing made easy and fun"><span style="display: inline-block; background-color: transparent; border-radius: 4px;"></span></a></p>
            </div>
        </div>
    </div>
</form>
</div>
<script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js"></script><script type="text/javascript">(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';fnames[3]='ADDRESS';ftypes[3]='address';fnames[4]='PHONE';ftypes[4]='phone';fnames[5]='BIRTHDAY';ftypes[5]='birthday';fnames[6]='COMPANY';ftypes[6]='text';}(jQuery));var $mcj = jQuery.noConflict(true);
    // SMS Phone Multi-Country Functionality
    if(!window.MC) {
      window.MC = {};
    }
    window.MC.smsPhoneData = {
      defaultCountryCode: 'AU',
      programs: [],
      smsProgramDataCountryNames: []
    };

    function getCountryUnicodeFlag(countryCode) {
       return countryCode.toUpperCase().replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397))
    };

    // HTML sanitization function to prevent XSS
    function sanitizeHtml(str) {
      if (typeof str !== 'string') return '';
      return str
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;')
        .replace(/\//g, '&#x2F;');
    }

    // URL sanitization function to prevent javascript: and data: URLs
    function sanitizeUrl(url) {
      if (typeof url !== 'string') return '';
      const trimmedUrl = url.trim().toLowerCase();
      if (trimmedUrl.startsWith('javascript:') || trimmedUrl.startsWith('data:') || trimmedUrl.startsWith('vbscript:')) {
        return '#';
      }
      return url;
    }

    const getBrowserLanguage = () => {
      if (!window?.navigator?.language?.split('-')[1]) {
        return window?.navigator?.language?.toUpperCase();
      }
      return window?.navigator?.language?.split('-')[1];
    };

    function getDefaultCountryProgram(defaultCountryCode, smsProgramData) {
      if (!smsProgramData || smsProgramData.length === 0) {
        return null;
      }

      const browserLanguage = getBrowserLanguage();

      if (browserLanguage) {
        const foundProgram = smsProgramData.find(
          (program) => program?.countryCode === browserLanguage,
        );
        if (foundProgram) {
          return foundProgram;
        }
      }

      if (defaultCountryCode) {
        const foundProgram = smsProgramData.find(
          (program) => program?.countryCode === defaultCountryCode,
        );
        if (foundProgram) {
          return foundProgram;
        }
      }

      return smsProgramData[0];
    }

    function updateSmsLegalText(countryCode, fieldName) {
      if (!countryCode || !fieldName) {
        return;
      }
      
      const programs = window?.MC?.smsPhoneData?.programs;
      if (!programs || !Array.isArray(programs)) {
        return;
      }
      
      const program = programs.find(program => program?.countryCode === countryCode);
      if (!program || !program.requiredTemplate) {
        return;
      }
      
      const legalTextElement = document.querySelector('#legal-text-' + fieldName);
      if (!legalTextElement) {
        return;
      }
      
      // Remove HTML tags and clean up the text
      const divRegex = new RegExp('</?[div][^>]*>', 'gi');
      const fullAnchorRegex = new RegExp('<a.*?</a>', 'g');
      const anchorRegex = new RegExp('<a href="(.*?)" target="(.*?)">(.*?)</a>');
      
      const requiredLegalText = program.requiredTemplate
        .replace(divRegex, '')
        .replace(fullAnchorRegex, '')
        .slice(0, -1);
      
      const anchorMatches = program.requiredTemplate.match(anchorRegex);
      
      if (anchorMatches && anchorMatches.length >= 4) {
        // Create link element safely using DOM methods instead of innerHTML
        const linkElement = document.createElement('a');
        linkElement.href = sanitizeUrl(anchorMatches[1]);
        linkElement.target = sanitizeHtml(anchorMatches[2]);
        linkElement.textContent = sanitizeHtml(anchorMatches[3]);
        
        legalTextElement.textContent = requiredLegalText + ' ';
        legalTextElement.appendChild(linkElement);
        legalTextElement.appendChild(document.createTextNode('.'));
      } else {
        legalTextElement.textContent = requiredLegalText + '.';
      }
    }

    function generateDropdownOptions(smsProgramData) {
      if (!smsProgramData || smsProgramData.length === 0) {
        return '';
      }
      
      return smsProgramData.map(program => {
        const flag = getCountryUnicodeFlag(program.countryCode);
        const countryName = getCountryName(program.countryCode);
        const callingCode = program.countryCallingCode || '';
        // Sanitize all values to prevent XSS
        const sanitizedCountryCode = sanitizeHtml(program.countryCode || '');
        const sanitizedCountryName = sanitizeHtml(countryName || '');
        const sanitizedCallingCode = sanitizeHtml(callingCode || '');
        return '<option value="' + sanitizedCountryCode + '">' + sanitizedCountryName + ' ' + sanitizedCallingCode + '</option>';
      }).join('');
    }

    function getCountryName(countryCode) {
      if (window.MC?.smsPhoneData?.smsProgramDataCountryNames && Array.isArray(window.MC.smsPhoneData.smsProgramDataCountryNames)) {
        for (let i = 0; i < window.MC.smsPhoneData.smsProgramDataCountryNames.length; i++) {
          if (window.MC.smsPhoneData.smsProgramDataCountryNames[i].code === countryCode) {
            return window.MC.smsPhoneData.smsProgramDataCountryNames[i].name;
          }
        }
      }
      return countryCode;
    }

    function getDefaultPlaceholder(countryCode) {
      if (!countryCode || typeof countryCode !== 'string') {
        return '+1 000 000 0000'; // Default US placeholder
      }
      
      const mockPlaceholders = [
        {
      countryCode: 'US',
      placeholder: '+1 000 000 0000',
      helpText: 'Include the US country code +1 before the phone number',
    },
    {
      countryCode: 'GB',
      placeholder: '+44 0000 000000',
      helpText: 'Include the GB country code +44 before the phone number',
    },
    {
      countryCode: 'CA',
      placeholder: '+1 000 000 0000',
      helpText: 'Include the CA country code +1 before the phone number',
    },
    {
      countryCode: 'AU',
      placeholder: '+61 000 000 000',
      helpText: 'Include the AU country code +61 before the phone number',
    },
    {
      countryCode: 'DE',
      placeholder: '+49 000 0000000',
      helpText: 'Fügen Sie vor der Telefonnummer die DE-Ländervorwahl +49 ein',
    },
    {
      countryCode: 'FR',
      placeholder: '+33 0 00 00 00 00',
      helpText: 'Incluez le code pays FR +33 avant le numéro de téléphone',
    },
    {
      countryCode: 'ES',
      placeholder: '+34 000 000 000',
      helpText: 'Incluya el código de país ES +34 antes del número de teléfono',
    },
    {
      countryCode: 'NL',
      placeholder: '+31 0 00000000',
      helpText: 'Voeg de NL-landcode +31 toe vóór het telefoonnummer',
    },
    {
      countryCode: 'BE',
      placeholder: '+32 000 00 00 00',
      helpText: 'Incluez le code pays BE +32 avant le numéro de téléphone',
    },
    {
      countryCode: 'CH',
      placeholder: '+41 00 000 00 00',
      helpText: 'Fügen Sie vor der Telefonnummer die CH-Ländervorwahl +41 ein',
    },
    {
      countryCode: 'AT',
      placeholder: '+43 000 000 0000',
      helpText: 'Fügen Sie vor der Telefonnummer die AT-Ländervorwahl +43 ein',
    },
    {
      countryCode: 'IE',
      placeholder: '+353 00 000 0000',
      helpText: 'Include the IE country code +353 before the phone number',
    },
    {
      countryCode: 'IT',
      placeholder: '+39 000 000 0000',
      helpText:
        'Includere il prefisso internazionale IT +39 prima del numero di telefono',
    },
      ];

      const selectedPlaceholder = mockPlaceholders.find(function(item) {
        return item && item.countryCode === countryCode;
      });
      
      return selectedPlaceholder ? selectedPlaceholder.placeholder : mockPlaceholders[0].placeholder;
    }

    function updatePlaceholder(countryCode, fieldName) {
      if (!countryCode || !fieldName) {
        return;
      }
      
      const phoneInput = document.querySelector('#mce-' + fieldName);
      if (!phoneInput) {
        return;
      }
      
      const placeholder = getDefaultPlaceholder(countryCode);
      if (placeholder) {
        phoneInput.placeholder = placeholder;
      }
    }

    function updateCountryCodeInstruction(countryCode, fieldName) {
      updatePlaceholder(countryCode, fieldName);
      
    }

    function getDefaultHelpText(countryCode) {
      const mockPlaceholders = [
        {
          countryCode: 'US',
          placeholder: '+1 000 000 0000',
          helpText: 'Include the US country code +1 before the phone number',
        },
        {
          countryCode: 'GB',
          placeholder: '+44 0000 000000',
          helpText: 'Include the GB country code +44 before the phone number',
        },
        {
          countryCode: 'CA',
          placeholder: '+1 000 000 0000',
          helpText: 'Include the CA country code +1 before the phone number',
        },
        {
          countryCode: 'AU',
          placeholder: '+61 000 000 000',
          helpText: 'Include the AU country code +61 before the phone number',
        },
        {
          countryCode: 'DE',
          placeholder: '+49 000 0000000',
          helpText: 'Fügen Sie vor der Telefonnummer die DE-Ländervorwahl +49 ein',
        },
        {
          countryCode: 'FR',
          placeholder: '+33 0 00 00 00 00',
          helpText: 'Incluez le code pays FR +33 avant le numéro de téléphone',
        },
        {
          countryCode: 'ES',
          placeholder: '+34 000 000 000',
          helpText: 'Incluya el código de país ES +34 antes del número de teléfono',
        },
        {
          countryCode: 'NL',
          placeholder: '+31 0 00000000',
          helpText: 'Voeg de NL-landcode +31 toe vóór het telefoonnummer',
        },
        {
          countryCode: 'BE',
          placeholder: '+32 000 00 00 00',
          helpText: 'Incluez le code pays BE +32 avant le numéro de téléphone',
        },
        {
          countryCode: 'CH',
          placeholder: '+41 00 000 00 00',
          helpText: 'Fügen Sie vor der Telefonnummer die CH-Ländervorwahl +41 ein',
        },
        {
          countryCode: 'AT',
          placeholder: '+43 000 000 0000',
          helpText: 'Fügen Sie vor der Telefonnummer die AT-Ländervorwahl +43 ein',
        },
        {
          countryCode: 'IE',
          placeholder: '+353 00 000 0000',
          helpText: 'Include the IE country code +353 before the phone number',
        },
        {
          countryCode: 'IT',
          placeholder: '+39 000 000 0000',
          helpText: 'Includere il prefisso internazionale IT +39 prima del numero di telefono',
        },
      ];
      
      if (!countryCode || typeof countryCode !== 'string') {
        return mockPlaceholders[0].helpText;
      }
      
      const selectedHelpText = mockPlaceholders.find(function(item) {
          return item && item.countryCode === countryCode;
        });
        
        return selectedHelpText ? selectedHelpText.helpText : mockPlaceholders[0].helpText;
    }

    function setDefaultHelpText(countryCode) {
      const helpTextSpan = document.querySelector('#help-text');
      if (!helpTextSpan) {
        return;
      }

        
    }

    function updateHelpTextCountryCode(countryCode, fieldName) {
      if (!countryCode || !fieldName) {
        return;
      }
      
      setDefaultHelpText(countryCode);
    }

    function initializeSmsPhoneDropdown(fieldName) {
      if (!fieldName || typeof fieldName !== 'string') {
        return;
      }
      
      const dropdown = document.querySelector('#country-select-' + fieldName);
      const displayFlag = document.querySelector('#flag-display-' + fieldName);
      
      if (!dropdown || !displayFlag) {
        return;
      }

      const smsPhoneData = window.MC?.smsPhoneData;
      if (smsPhoneData && smsPhoneData.programs && Array.isArray(smsPhoneData.programs)) {
        dropdown.innerHTML = generateDropdownOptions(smsPhoneData.programs);
      }

      const defaultProgram = getDefaultCountryProgram(smsPhoneData?.defaultCountryCode, smsPhoneData?.programs);
      if (defaultProgram && defaultProgram.countryCode) {
        dropdown.value = defaultProgram.countryCode;
        
        const flagSpan = displayFlag?.querySelector('#flag-emoji-' + fieldName);
        if (flagSpan) {
          flagSpan.textContent = getCountryUnicodeFlag(defaultProgram.countryCode);
          flagSpan.setAttribute('aria-label', sanitizeHtml(defaultProgram.countryCode) + ' flag');
        }
        
        updateSmsLegalText(defaultProgram.countryCode, fieldName);
        updatePlaceholder(defaultProgram.countryCode, fieldName);
        updateCountryCodeInstruction(defaultProgram.countryCode, fieldName);
      }

     
      var phoneInput = document.querySelector('#mce-' + fieldName);
      if (phoneInput && defaultProgram.countryCallingCode) {
        phoneInput.value = defaultProgram.countryCallingCode;
      }
      


      displayFlag?.addEventListener('click', function(e) {
        dropdown.focus();
      });


      dropdown?.addEventListener('change', function() {
        const selectedCountry = this.value;
        
        if (!selectedCountry || typeof selectedCountry !== 'string') {
          return;
        }
        
        const flagSpan = displayFlag?.querySelector('#flag-emoji-' + fieldName);
        if (flagSpan) {
          flagSpan.textContent = getCountryUnicodeFlag(selectedCountry);
          flagSpan.setAttribute('aria-label', sanitizeHtml(selectedCountry) + ' flag');
        }

         
        const selectedProgram = window.MC?.smsPhoneData?.programs.find(function(program) {
          return program && program.countryCode === selectedCountry;
        });
        var phoneInput = document.querySelector('#mce-' + fieldName);
        if (phoneInput && selectedProgram.countryCallingCode) {
          phoneInput.value = selectedProgram.countryCallingCode;
        }
        
        
        updateSmsLegalText(selectedCountry, fieldName);
        updatePlaceholder(selectedCountry, fieldName);
        updateCountryCodeInstruction(selectedCountry, fieldName);
      });
    }

    document.addEventListener('DOMContentLoaded', function() {
      const smsPhoneFields = document.querySelectorAll('[id^="country-select-"]');
      
      smsPhoneFields.forEach(function(dropdown) {
        const fieldName = dropdown?.id.replace('country-select-', '');
        initializeSmsPhoneDropdown(fieldName);
      });
    });
    </script></div>

              {%- endcase -%}
            {%- endfor -%}
          </div>
          <div class="block-social-wrap mt-5">
            {% render 'social-media', class: 'block-social-inline d-flex justify-content-center list-unstyled', password: true %}
          </div>
        </div>
        {%- if section.settings.clock -%}
          <div class="clock">
            {%- if shop.password_message != blank -%}
              <div class="coming-soon-top-text">{{ shop.password_message }}</div>
            {%- endif -%}
            <div class="clock-circle">
              <div class="clock-indicators">
                {%- for i in (1..60) -%}
                  <div class="clock-indicators__item"></div>
                {%- endfor -%}
              </div>
              <div class="second-hand second-hand-marker--shadow d-none">
                <div class="second-hand-marker"></div>
              </div>
            </div>
          </div>
        {%- endif -%}
      </div>
    </div>

    <div class="coming-soon-copyright">
      {% render 'copyright', section: section %}
    </div>
  </div>
</main-password>
{% schema %}
{
  "name": "Password page",
  "tag": "section",
  "class": "spaced-section spaced-section--full-width",
  "settings": [
    {
      "type": "select",
      "id": "style",
      "label": "Style",
      "options": [
        {
          "value": "classic",
          "label": "Classic"
        },
        {
          "value": "colorized",
          "label": "Colorized"
        }
      ],
      "default": "classic"
    },
    {
      "type": "checkbox",
      "id": "clock",
      "label": "Clock",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "heading",
      "name": "Heading",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "default": "Opening soon",
          "label": "Heading"
        }
      ]
    },
    {
      "type": "paragraph",
      "name": "Paragraph",
      "limit": 1,
      "settings": [
        {
          "type": "richtext",
          "id": "text",
          "default": "<p>Be the first to know when we launch.</p>",
          "label": "Description"
        }
      ]
    },
    {
      "type": "email_form",
      "name": "Email form",
      "limit": 1,
      "settings": [
        {
          "type": "paragraph",
          "content": "Each email subscription creates a customer account. [Learn more](https://help.shopify.com/en/manual/customers)"
        }
      ]
    }
  ],
  "default": {
    "blocks": [
      {
        "type": "heading"
      },
      {
        "type": "paragraph"
      },
      {
        "type": "email_form"
      }
    ]
  }
}
{% endschema %}
